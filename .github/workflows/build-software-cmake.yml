name: Build DigiLivolo software

on:
  push:
    # branches: [ main ]
    tags:
      - "v*.*.*"
    inputs:
      hbb64:
        description: "ghcr.io/phusion/holy-build-box/hbb-64"
        default: "ghcr.io/phusion/holy-build-box/hbb-64"
  # pull_request:
    # branches: [ main ]

jobs:
  build:
    runs-on: ${{ matrix.sys.os }}
    container: ${{ matrix.sys.container }}

    strategy:
      # Set fail-fast to false to ensure that feedback is delivered for all matrix combinations. Consider changing this to true when your workflow is stable.
      fail-fast: false

      matrix:
        sys:
          - { os: ubuntu-latest, container: $hbb64, shell: bash, c_compiler: gcc, binary_orig: digilivolo, binary_target: digilivolo-hbb64 }
          - { os: ubuntu-latest, container: "${{ hbb64 }}", shell: bash, c_compiler: gcc, binary_orig: digilivolo, binary_target: digilivolo-hbb64 }
#          - { os: ubuntu-latest, container: 'debian:10', shell: bash       , c_compiler: gcc    , binary_orig: digilivolo    , binary_target: digilivolo-linux-debian-x86_64 }
#          - { os: ubuntu-20.04                         , shell: bash       , c_compiler: gcc    , binary_orig: digilivolo    , binary_target: digilivolo-linux-ubuntu-x86_64 }
#          - { os: ubuntu-latest, container: 'debian'   , shell: bash       , crosscompile: armhf, binary_orig: digilivolo    , binary_target: digilivolo-linux-armhf }
#          - { os: ubuntu-latest, container: 'debian'   , shell: bash       , crosscompile: arm64, binary_orig: digilivolo    , binary_target: digilivolo-linux-arm64 }
#          - { os: ubuntu-20.04                         , shell: bash       , c_compiler: clang  , binary_orig: digilivolo    , binary_target: digilivolo-clang64 }
#          - { os: windows-latest                       , shell: 'msys2 {0}', c_compiler: gcc    , binary_orig: digilivolo.exe, binary_target: digilivolo-win-ucrt64.exe }
#          - { os: windows-latest                       , shell: pwsh       , c_compiler: gcc    , binary_orig: digilivolo.exe, binary_target: digilivolo-win-x86_64.exe }
#          - { os: windows-latest                       , shell: pwsh       , c_compiler: clang  , binary_orig: digilivolo.exe, binary_target: digilivolo-win-clang64.exe }
        build_type: [Release]
	hbb64: [ 'ghcr.io/phusion/holy-build-box/hbb-64' ]
        include:
          - env:
            hbb64: "ghcr.io/phusion/holy-build-box/hbb-64"
     

    defaults:
      run:
        shell: ${{ matrix.sys.shell }}

    steps:

    - name: Install prereq packages on container
      if: matrix.sys.container != ''
      run: |
        apt update || yum -y install https://packages.endpointdev.com/rhel/7/os/x86_64/endpoint-repo.x86_64.rpm
        apt -y full-upgrade || yum update -y
        apt install -y sudo git dialog python3 python3-pip python3-setuptools curl wget || yum install -y sudo git dialog python3 python3-pip python3-setuptools ninja-build make cmake3 libusb-devel libudev-devel curl wget
        git --version
        git config --global --add safe.directory /__w/dl/dl
        echo
        cat /etc/os-release

#    - uses: awalsh128/cache-apt-pkgs-action@latest
#      if: matrix.sys.os == 'ubuntu-latest' && matrix.sys.container != 'ghcr.io/phusion/holy-build-box/hbb-64'
#      with:
#        packages: libudev-dev sudo gcc cmake build-essential make sudo libusb-dev libc6-dev pkg-config file ninja-build clang
#        version: 1.0

    - uses: ConorMacBride/install-package@v1
      if: matrix.sys.container != 'ghcr.io/phusion/holy-build-box/hbb-64'
      with:
        apt: libudev-dev sudo gcc cmake build-essential make sudo libusb-dev libc6-dev pkg-config file ninja-build clang

    - uses: actions/checkout@v3
      with:
        submodules: 'recursive'

    - name: Configure HBB env & checkout submodules
      if: matrix.sys.container == 'ghcr.io/phusion/holy-build-box/hbb-64'
      run: |
        ln -s /usr/bin/cmake3 /usr/bin/cmake
        git submodule init || /bin/true
        git submodule update || /bin/true

    - name: Debug
      shell: bash
      run: |
        ls -l
        pwd
        echo ${{ github.workspace }}
        echo $GITHUB_WORKSPACE
        echo "binary_orig: ${{ matrix.binary_orig }}"
        echo "binary_target: ${{ matrix.binary_target }}"
        echo "sys.binary_orig: ${{ matrix.sys.binary_orig }}"
        echo "sys.binary_target: ${{ matrix.sys.binary_target }}"
        echo "sys.toolchain_file: ${{ matrix.sys.toolchain_file }}"
        echo "CMAKE_TOOLCHAIN_FILE_OPT: $CMAKE_TOOLCHAIN_FILE_OPT"
        echo "MY_ENV_VAR2: $MY_ENV_VAR2"
        echo "MY_ENV_VAR3: $MY_ENV_VAR3"
      env:
        CMAKE_TOOLCHAIN_FILE_OPT: ${{ matrix.sys.toolchain_file == '' && ' ' || format('-DCMAKE_TOOLCHAIN_FILE=cmake/{0}', matrix.sys.toolchain_file) }}
#        MY_ENV_VAR2: matrix.sys.toolchain_file == '' && 'EMPTY' || "-DCMAKE_TOOLCHAIN_FILE=software/cmake/${{matrix.sys.toolchain_file}}"
        MY_ENV_VAR2: ${{ format('-DCMAKE_TOOLCHAIN_FILE=software/cmake/{0}', matrix.sys.toolchain_file ) }}
        MY_ENV_VAR3: ${{ env.MY_ENV_VAR2 == '-DCMAKE_TOOLCHAIN_FILE=software/cmake/' && 'EMPTY' || env.MY_ENV_VAR2 }}

    - name: Install Ninja
      if: matrix.sys.shell == 'pwsh'
      uses: turtlesec-no/get-ninja@main

    - name: 'Setup MSYS2'
      if: matrix.sys.shell == 'msys2 {0}'
      uses: msys2/setup-msys2@v2
      with:
        msystem: UCRT64
        update: true
        install: >-
          git
          make
          mingw-w64-ucrt-x86_64-gcc
        pacboy: >-
          toolchain:p
          cmake:p
          ninja:p

    - name: Install toolchain
      if: ${{ matrix.sys.crosscompile != '' }}
      shell: bash
      run: |
        echo "Installing cross toolchain for ${{ matrix.sys.crosscompile }}"
        sudo dpkg --add-architecture ${{ matrix.sys.crosscompile }}
        sudo apt update
        sudo apt install -y crossbuild-essential-${{ matrix.sys.crosscompile }}
        sudo apt install -y libudev-dev:${{ matrix.sys.crosscompile }} libusb-dev:${{ matrix.sys.crosscompile }} libc6-dev:${{ matrix.sys.crosscompile }} pkg-config:${{ matrix.sys.crosscompile }}

    - name: Configure CMake
      run: >
        cmake -B software/build ${{ env.CMAKE_TOOLCHAIN_FILE_OPT }} ${{ env.CMAKE_C_COMPILER_OPT }}
        -DCMAKE_BUILD_TYPE=${{ matrix.build_type }}
        -DUSE_SYSTEM_HIDAPI=false
        -G Ninja
        -S software
      env:
        CMAKE_TOOLCHAIN_FILE_OPT: ${{ matrix.sys.crosscompile == '' && ' ' || format('-DCMAKE_TOOLCHAIN_FILE=cmake/{0}-linux-toolchain.cmake', matrix.sys.crosscompile) }}
        CMAKE_C_COMPILER_OPT: ${{ matrix.sys.c_compiler == '' && ' ' || format('-DCMAKE_C_COMPILER={0}', matrix.sys.c_compiler) }}

    - name: Build
      run: cmake --build software/build

    - name: Print info on compiled binary
      shell: bash
      run: |
        objdump -x software/build/${{ matrix.sys.binary_orig }} || /bin/true
        size -A software/build/${{ matrix.sys.binary_orig }} || /bin/true
        ldd -v software/build/${{ matrix.sys.binary_orig }} || /bin/true
        file software/build/${{ matrix.sys.binary_orig }} || /bin/true
        ls -l software/build/${{ matrix.sys.binary_orig }} || /bin/true

    - name: Rename binary
      if: ${{ matrix.sys.binary_target != '' }}
      shell: bash
      run: |
        mv software/build/${{ matrix.sys.binary_orig }} software/build/${{ matrix.sys.binary_target }}

    - name: Make and upload release
      uses: softprops/action-gh-release@v1
      if: startsWith(github.ref, 'refs/tags/') && matrix.sys.binary_target != ''
      with:
        fail_on_unmatched_files: false
        generate_release_notes: true        
#        make_latest: true
        files: software/build/${{ matrix.sys.binary_target }}
