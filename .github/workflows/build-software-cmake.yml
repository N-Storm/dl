name: Build DigiLivolo software

on:
  push:
    # branches: [ main ]
    tags:
      - "v*.*.*"
  # pull_request:
    # branches: [ main ]

jobs:
  build:
    runs-on: ${{ matrix.sys.os }}
    container: ${{ matrix.sys.container }}

    strategy:
      # Set fail-fast to false to ensure that feedback is delivered for all matrix combinations. Consider changing this to true when your workflow is stable.
      fail-fast: false

      matrix:
        sys:
          - { os: ubuntu-latest,  container: debian, shell: bash,        c_compiler: gcc, binary_orig: digilivolo, binary_target: digilivolo-linux-debian-x86_64 }
          - { os: ubuntu-latest,                     shell: bash,        c_compiler: gcc, binary_orig: digilivolo, binary_target: digilivolo-linux-ubuntu-x86_64 }
          - { os: ubuntu-latest,  container: debian, shell: bash,        toolchain_file: arm-linux-gnueabihf-gcc-toolchain.cmake, binary_orig: digilivolo, binary_target: digilivolo-linux-armhf }
          - { os: ubuntu-latest,                     shell: bash,        c_compiler: clang, binary_orig: digilivolo, binary_target: digilivolo-clang64 }
          - { os: ubuntu-latest,  container: ghcr.io/phusion/holy-build-box/hbb-64, shell: bash, c_compiler: gcc, binary_orig: digilivolo, binary_target: digilivolo-hbb64 }
          - { os: windows-latest,                    shell: 'msys2 {0}', c_compiler: gcc, binary_orig: digilivolo.exe, binary_target: digilivolo-win-ucrt64.exe }
          - { os: windows-latest,                    shell: pwsh,        c_compiler: gcc, binary_orig: digilivolo.exe, binary_target: digilivolo-win-x86_64.exe }
          - { os: windows-latest,                    shell: pwsh,        c_compiler: clang, binary_orig: digilivolo.exe, binary_target: digilivolo-win-clang64.exe }
        build_type: [Release]

    defaults:
      run:
        shell: ${{ matrix.sys.shell }}

    steps:
    - name: Install prereq packages on Debian container
      if: matrix.sys.container == 'debian'
      run: |
        apt update
        apt install -y sudo git dialog python3 python3-pip python3-setuptools
        apt -y full-upgrade
        git --version
        git config --global --add safe.directory /__w/dl/dl
        echo
        cat /etc/os-release

    - name: Install prereq packages on HBB container
      if: matrix.sys.container == 'ghcr.io/phusion/holy-build-box/hbb-64'
      run: |
        yum update -y
        yum install -y sudo git dialog python3 python3-pip python3-setuptools ninja make cmake3 libusb-devel libudev-devel
        git --version
        git config --global --add safe.directory /__w/dl/dl
        echo
        cat /etc/os-release

    - uses: awalsh128/cache-apt-pkgs-action@latest
      if: matrix.sys.container != 'ghcr.io/phusion/holy-build-box/hbb-64'
      with:
        packages: libudev-dev sudo gcc cmake build-essential make sudo libusb-dev libc6-dev pkg-config file ninja-build clang
        version: 1.0

    - uses: ConorMacBride/install-package@v1
      if: matrix.sys.container != 'ghcr.io/phusion/holy-build-box/hbb-64'
      with:
        apt: libudev-dev sudo gcc cmake build-essential make sudo libusb-dev libc6-dev pkg-config file ninja-build clang

    - uses: actions/checkout@v4
      if: matrix.sys.container != 'ghcr.io/phusion/holy-build-box/hbb-64'
      with:
        submodules: 'recursive'

    - uses: actions/checkout@v3
      if: matrix.sys.container == 'ghcr.io/phusion/holy-build-box/hbb-64'

    - name: Configure HBB env & checkout submodules
      run: |
        ln -s /usr/bin/cmake3 /usr/bin/cmake
        cd dl && git submodule init && git submodule update

    - name: Debug
      shell: bash
      run: |
        ls -l
        pwd
        echo "binary_orig: ${{ matrix.binary_orig }}"
        echo "binary_target: ${{ matrix.binary_target }}"
        echo "sys.binary_orig: ${{ matrix.sys.binary_orig }}"
        echo "sys.binary_target: ${{ matrix.sys.binary_target }}"
        echo "sys.toolchain_file: ${{ matrix.sys.toolchain_file }}"
        echo "CMAKE_TOOLCHAIN_FILE_OPT: $CMAKE_TOOLCHAIN_FILE_OPT"
        echo "MY_ENV_VAR2: $MY_ENV_VAR2"
        echo "MY_ENV_VAR3: $MY_ENV_VAR3"
      env:
        CMAKE_TOOLCHAIN_FILE_OPT: ${{ matrix.sys.toolchain_file == '' && ' ' || format('-DCMAKE_TOOLCHAIN_FILE=cmake/{0}', matrix.sys.toolchain_file) }}
#        MY_ENV_VAR2: matrix.sys.toolchain_file == '' && 'EMPTY' || "-DCMAKE_TOOLCHAIN_FILE=software/cmake/${{matrix.sys.toolchain_file}}"
        MY_ENV_VAR2: ${{ format('-DCMAKE_TOOLCHAIN_FILE=software/cmake/{0}', matrix.sys.toolchain_file ) }}
        MY_ENV_VAR3: ${{ env.MY_ENV_VAR2 == '-DCMAKE_TOOLCHAIN_FILE=software/cmake/' && 'EMPTY' || env.MY_ENV_VAR2 }}

    - name: Install Ninja
      if: matrix.sys.shell == 'pwsh'
#      if: matrix.sys.shell != 'msys2 {0}'
      uses: turtlesec-no/get-ninja@main

    - name: 'Setup MSYS2'
      if: matrix.sys.shell == 'msys2 {0}'
      uses: msys2/setup-msys2@v2
      with:
        msystem: UCRT64
        update: true
        install: >-
          git
          make
          mingw-w64-ucrt-x86_64-gcc
        pacboy: >-
          toolchain:p
          cmake:p
          ninja:p

    - name: Install toolchain
      if: ${{ matrix.sys.toolchain_file != '' }}
      shell: bash
      run: |
        echo "Installing cross toolchain"
        sudo dpkg --add-architecture armhf
        sudo apt update
        sudo apt install -y crossbuild-essential-armhf
        sudo apt install -y libudev-dev:armhf libusb-dev:armhf libc6-dev:armhf pkg-config:armhf

    - name: Configure CMake
      run: >
        cmake -B software/build ${{ env.CMAKE_TOOLCHAIN_FILE_OPT }}
        -DCMAKE_C_COMPILER=${{ matrix.sys.c_compiler }}
        -DCMAKE_BUILD_TYPE=${{ matrix.build_type }}
        -DUSE_SYSTEM_HIDAPI=false
        -G Ninja
        -S software
      env:
        CMAKE_TOOLCHAIN_FILE_OPT: ${{ matrix.sys.toolchain_file == '' && ' ' || format('-DCMAKE_TOOLCHAIN_FILE=cmake/{0}', matrix.sys.toolchain_file) }}

    - name: Build
      run: cmake --build software/build

    - name: Print binary info
      shell: bash
      run: |
        objdump -x software/build/${{ matrix.sys.binary_orig }} || /bin/true
        size -A software/build/${{ matrix.sys.binary_orig }} || /bin/true
        ldd -v software/build/${{ matrix.sys.binary_orig }} || /bin/true
        file software/build/${{ matrix.sys.binary_orig }} || /bin/true
        ls -l software/build/${{ matrix.sys.binary_orig }} || /bin/true

    - name: Rename binary
      if: ${{ matrix.sys.binary_target != '' }}
      shell: bash
      run: |
        mv software/build/${{ matrix.sys.binary_orig }} software/build/${{ matrix.sys.binary_target }}

    - name: Make and upload release
      uses: softprops/action-gh-release@v2
      if: startsWith(github.ref, 'refs/tags/') && matrix.sys.binary_target != ''
      with:
        fail_on_unmatched_files: false
        generate_release_notes: true        
        make_latest: true
        files: software/build/${{ matrix.sys.binary_target }}
